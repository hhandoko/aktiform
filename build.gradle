import java.time.ZonedDateTime
import java.time.format.DateTimeFormatter

plugins {
    id 'com.adarshr.test-logger'
    id "com.diffplug.gradle.spotless"
    id 'com.github.ben-manes.versions'
    id 'io.spring.dependency-management'
    id 'org.springframework.boot'

    id 'java'
    id 'scala'
}

apply from: "${project.rootDir}/gradle/ext/javacOptions.gradle"
apply from: "${project.rootDir}/gradle/ext/scalacOptions.gradle"
apply from: "${project.rootDir}/utils.gradle"

def appVersion = rootProject.file('VERSION.txt').text.trim()
def timestampFormatter = DateTimeFormatter.ISO_OFFSET_DATE_TIME

group = 'com.hhandoko'
version = appVersion
sourceCompatibility = JavaVersion.VERSION_11

processResources {
    // Similar to property expansion, to hardcode application info at compile-time
    filesMatching("**/application.properties") {
        // Replace ${APP_VERSION} with hardcoded application version string}
        filter { line ->
            line.contains('${APP_VERSION}') ? line.replace('${APP_VERSION}', appVersion) : line
        }

        // Replace ${BUILD_TIMESTAMP} with hardcoded current timestamp
        filter { line ->
            line.contains('${BUILD_TIMESTAMP}') ? line.replace('${BUILD_TIMESTAMP}', ZonedDateTime.now().format(timestampFormatter)) : line
        }

        // Replace ${COMMIT_HASH} with latest git commit hash
        filter { line ->
            line.contains('${COMMIT_HASH}') ? line.replace('${COMMIT_HASH}', gitShortHash()) : line
        }
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    annotationProcessor 'org.projectlombok:lombok'

    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    compileOnly 'org.projectlombok:lombok'
    compileOnly "org.springframework:spring-context-indexer:${springVersion}"

    implementation "org.graalvm.sdk:graal-sdk:${graalSdkVersion}"
    implementation "org.scala-lang:scala-library:${scalaVersion}"
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-mustache'
    implementation('org.springframework.boot:spring-boot-starter-web') {
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-tomcat'
    }
    implementation 'org.springframework.boot:spring-boot-starter-undertow'
    implementation scala("com.typesafe.scala-logging:scala-logging:${scalaLoggingVersion}")

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation scala("net.ruippeixotog:scala-scraper:${scalaScraperVersion}")
    testImplementation scala("org.scalatest:scalatest:${scalatestVersion}")
}

configurations.all {
    // Ensure that version conflict in dependencies throws error at compile-time rather that fail at runtime
    resolutionStrategy {
        failOnVersionConflict()
        preferProjectModules()
    }
}

bootRun {
    // Pass `local` as active profile configuration in `bootRun` for better development experience
    def profile = 'local'
    environment 'BOOT_ENV', profile
    systemProperty 'spring.profiles.active', profile
}

// Code formatter Gradle plugin
// See: https://github.com/diffplug/spotless
//      https://github.com/diffplug/spotless/tree/master/plugin-gradle
spotless {
    // Use Google Java's styleguide
    // See: https://google.github.io/styleguide/javaguide.html
    java {
        googleJavaFormat()
        importOrder 'java', 'javax', 'scala', '', '\\#', 'com.hhandoko', '\\#com.hhandoko'
    }

    // Use customer scalafmt rule as defined in `.scalafmt.conf`
    // scalafmt does not support import orders (yet), so import configuration needs to be setup by each developer
    // following the rules above (as per Java rules).
    // See: https://scalameta.org/scalafmt/
    scala {
        scalafmt(gradleScalaFmtVersion).configFile('.scalafmt.conf')
    }
}

test {
}

// Pretty-print test output Gradle plugin, supports parallel test execution
// See: https://github.com/radarsh/gradle-test-logger-plugin
testlogger {
    theme 'mocha'
    slowThreshold 2000 // ms
}
